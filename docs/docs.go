// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/posts": {
            "get": {
                "description": "Get all social media posts with a response wrapper containing message and data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Retrieve all posts",
                "responses": {
                    "200": {
                        "description": "Posts retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.PostsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new social media post with the required fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Create a new post",
                "parameters": [
                    {
                        "description": "Post data",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.PostInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Post created successfully",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.SinglePostResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create post due to server error",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/due-date": {
            "get": {
                "description": "Retrieve posts within the specified date range. Dates must be in YYYY-MM-DD format.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Retrieve posts by due date range",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date in YYYY-MM-DD format",
                        "name": "date1",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date in YYYY-MM-DD format",
                        "name": "date2",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Posts found within range",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.PostsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid date format or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/{id}": {
            "put": {
                "description": "Update an existing social media post by ID. Only non-empty fields will be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update an existing post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Post data",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.PostInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post updated successfully",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.SinglePostResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing ID",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update post due to server error",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a social media post by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete a post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Post ID is missing",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete post due to server error",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/{targetDate}": {
            "get": {
                "description": "Get posts with due dates between now and now+targetDate days.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Retrieve posts within a day range from now",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of days from now to filter posts",
                        "name": "targetDate",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Posts found in the specified range",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.PostsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid targetDate parameter",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model_todoSM.ServerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model_todoSM.ErrorResponse": {
            "type": "object",
            "properties": {
                "Error": {
                    "type": "string",
                    "example": "invalid request body"
                }
            }
        },
        "model_todoSM.NotFoundResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Resource not found"
                }
            }
        },
        "model_todoSM.Post": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "due_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "platform": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "model_todoSM.PostInput": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string",
                    "example": "Brand A"
                },
                "due_date": {
                    "description": "Harus sebagai string di input",
                    "type": "string",
                    "example": "2025-01-10"
                },
                "platform": {
                    "type": "string",
                    "example": "Platform X"
                },
                "title": {
                    "type": "string",
                    "example": "My Post"
                }
            }
        },
        "model_todoSM.PostsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model_todoSM.Post"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Posts found!"
                }
            }
        },
        "model_todoSM.ServerErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Failed to process request"
                }
            }
        },
        "model_todoSM.SinglePostResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model_todoSM.Post"
                },
                "message": {
                    "type": "string",
                    "example": "Post retrieved successfully"
                }
            }
        },
        "model_todoSM.StandardResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "TO-DO Api",
	Description:      "API to manage social media post",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
